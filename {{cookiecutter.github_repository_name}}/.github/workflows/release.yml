{% raw -%}
name: Publish Python distribution to PyPI

on:
  release:
    types:
    - published
  workflow_dispatch:
    inputs:
      new_version:
        description: New version number
        required: true
      skip_test_pypi_publish:
        desctiption: Skip publish to test PyPI
        required: false
        default: false
      skip_pypi_publish:
        desctiption: Skip publish to PyPI
        required: false
        default: false

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.release.tag_name }}
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
{%- endraw %}
{%- if cookiecutter.use_poetry == "y" %}
{%- raw %}
    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install pipx
        pipx install poetry
    - name: Get poetry cache dir
      id: poetry-cache
      run: |
        echo "::set-output name=dir::$(poetry config cache-dir)"
    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.poetry-cache.outputs.dir }}
        key: ${{ runner.os }}-poetry-py3.8-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-py3.8-
    - name: Install dependencies
      run: |
        poetry install
{%- endraw %}
{%- else %}
{%- raw %}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-py3.8-${{ hashFiles('requirements_dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-py3.8-
    - name: Install dependencies
      run: |
        pip install -r requirements_dev.txt
{%- endraw %}
{%- endif %}
{%- raw %}
    - name: Check version
      uses: actions/github-script@v4
      id: check-version
      with:
        script: |
          const version = (() => {
            if (context.payload.release) {
              return context.payload.release.tag_name.slice(1)
            } else if (context.payload.inputs) {
              return context.payload.inputs.new_version
            } else {
              throw 'Cannot check version to publish'
            }
          })()
          core.setOutput('version', version)
    - name: Bump version
      run: |
        {% endraw %}{% if cookiecutter.use_poetry == "y" %}poetry run {% endif %}{% raw %}bump2version --no-commit --no-tag --allow-dirty --new-version=0 patch
        {% endraw %}{% if cookiecutter.use_poetry == "y" %}poetry run {% endif %}{% raw %}bump2version --no-commit --no-tag --allow-dirty --new-version=${{ steps.check-version.outputs.version }} patch
{%- endraw %}
{%- if cookiecutter.use_poetry == "y" %}
    - name: Build
      run: |
        poetry build
{%- else %}
    - name: Build
      run: |
        python setup.py sdist
        python setup.py bdist_wheel
{%- endif %}
{%- if false %}
{%- raw %}
    - name: Publish distribution to Test PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        poetry config repositories.pypi-test https://test.pypi.org/legacy/
        poetry publish -n -r pypi-test
      if: ${{ github.event.inputs.skip_test_pypi_publish != 'true' }}
{%- endraw %}
{%- endif %}
{%- raw %}
    - name: Publish distribution to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
        skip_existing: true
      if: ${{ github.event.inputs.skip_test_pypi_publish != 'true' }}
{%- endraw %}
    - name: Install from test and test running
      run: |
        pip install --extra-index-url https://test.pypi.org/simple {{ cookiecutter.python_package_name }}
        python -c 'import {{ cookiecutter.python_package_name }};print({{ cookiecutter.python_package_name }}.__version__)'
        pip uninstall -y {{ cookiecutter.python_package_name }}
{%- raw %}
      if: ${{ github.event.inputs.skip_test_pypi_publish != 'true' }}
{%- endraw %}
{%- if false %}
{%- raw %}
    - name: Publish distribution to PyPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
      run: |
        poetry publish -n
{%- endraw %}
{%- endif %}
{%- raw %}
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_TOKEN }}
      if: ${{ github.event.inputs.skip_pypi_publish != 'true' }}
{%- endraw %}
    - name: Install and test running
      run: |
        pip install {{ cookiecutter.python_package_name }}
        python -c 'import {{ cookiecutter.python_package_name }};print({{ cookiecutter.python_package_name }}.__version__)'
{%- raw %}
      if: ${{ github.event.inputs.skip_pypi_publish != 'true' }}
{%- endraw %}
