{% raw -%}
name: CI

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
  workflow_dispatch:
    inputs:

jobs:
  build-and-test:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9]
        architecture: [x86, x64]
        exclude:
        - architecture: x86

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
{%- endraw %}
{%- if cookiecutter.use_poetry == "y" %}
{%- raw %}
    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install pipx
        pipx install poetry
    - name: Get poetry cache dir
      id: poetry-cache
      run: |
        echo "::set-output name=dir::$(poetry config cache-dir)"
    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.poetry-cache.outputs.dir }}
        key: ${{ runner.os }}-poetry-py${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-py${{ matrix.python-version }}-
    - name: Install dependencies
      run: |
        poetry install
{%- endraw %}
{%- else %}
{%- raw %}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('requirements_dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-py${{ matrix.python-version }}-
    - name: Install dependencies
      run: |
        pip install -r requirements_dev.txt
{%- endraw %}
{%- endif %}
    - name: Lint with flake8
      run: |
        {% if cookiecutter.use_poetry == "y" %}poetry run {% endif %}flake8
    - name: Test with pytest
      run: |
        {% if cookiecutter.use_poetry == "y" %}poetry run {% endif %}pytest -n auto --dist loadscope --doctest-modules --junit-xml=junit/test-results.xml --cov --cov-report=xml --cov-report=html
{%- raw %}
    - name: Update Codecov coverage report
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: ${{ matrix.os }}-py${{ matrix.python-version }}
{%- endraw %}
