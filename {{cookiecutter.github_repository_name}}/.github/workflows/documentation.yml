{% raw -%}
name: Documentation

on:
  push:
    branches:
    - master
  workflow_dispatch:
    inputs:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
{%- endraw %}
{%- if cookiecutter.use_poetry == "y" %}
{%- raw %}
    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install pipx
        pipx install poetry
    - name: Get poetry cache dir
      id: poetry-cache
      run: |
        echo "::set-output name=dir::$(poetry config cache-dir)"
    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.poetry-cache.outputs.dir }}
        key: ${{ runner.os }}-poetry-py3.8-${{ hashFiles('poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-py3.8-
    - name: Install dependencies
      run: |
        poetry install
{%- endraw %}
{%- else %}
{%- raw %}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: Restore cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-py3.8-${{ hashFiles('requirements_dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-py3.8-
    - name: Install dependencies
      run: |
        pip install -r requirements_dev.txt
{%- endraw %}
{%- endif %}
    - name: Build documentation
      run: |
        {% if cookiecutter.use_poetry == "y" %}poetry run {% endif %}make -C docs html
{%- raw %}
    - name: Publish documentaion to Github Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/build/html/
        force_orphan: true
        commit_message: ${{ github.event.head_commit.message }}
{%- endraw %}
